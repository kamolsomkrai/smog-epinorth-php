<?php

namespace app\controllers;

use app\models\Token;
use sizeg\jwt\Jwt;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\Response;

/**
 * AuthController implements the CRUD actions for Token model.
 */
class AuthController extends Controller
{
    /**
     * @inheritDoc
     */
    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                'verbs' => [
                    'class' => VerbFilter::className(),
                    'actions' => [
                        'delete' => ['POST'],
                    ],
                ],
                'access' => [
                    'class' => AccessControl::className(),
                    'only' => ['create','update','delete','index','view'],
                    'rules' => [
                        [
                            'actions'=>['create','update','delete','index','view'],
                            'allow'=> !\Yii::$app->user->isGuest,
                            'roles'=>['@'],
                        ],
                    ],
                ],
            ],

        );
    }

    public function beforeAction($action)
    {
        if($action->id == "test" || $action->id == 'send' || $action->id == "delete"){
            \Yii::$app->controller->enableCsrfValidation = false;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionEndpoint(){
        return $this->render('endpoint');
    }
    /**
     * Lists all Token models.
     *
     * @return string
     */
    public function actionIndex()
    {
        $dataProvider = new ActiveDataProvider([
            'query' => Token::find()
                        ->where(['hospcode'=>\Yii::$app->user->identity->office_code])
                        ->orderBy(['id'=>SORT_DESC])->limit(1),
            'sort'=>false,
            'pagination'=>false,
        ]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Token model.
     * @param int $id ID
     * @return string
     * @throws NotFoundHttpException if the model cannot be found
     */
//    public function actionView($id)
//    {
//        return $this->render('view', [
//            'model' => $this->findModel($id),
//        ]);
//    }

    /**
     * Creates a new Token model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return string|\yii\web\Response
     */
    public function actionTest(){

        $data = \Yii::$app->jwt->getValidationData();
        $headers = \Yii::$app->request->headers;

        $accept = $headers->get('Authorization');
        $token = str_replace('Bearer ','',$accept);

        $token = \Yii::$app->jwt->getParser()->parse((string) $token);


        var_dump($token->validate($data));

        return $token->getClaim('uid');

    }


    public function actionCreate()
    {
        $model = new Token();
        $model->hospcode = \Yii::$app->user->identity->office_code;
        $model->create_by_user_id = \Yii::$app->user->id;
        $token = $this->generateJwt();
        $model->token = "$token";
        $model->save();
        return $this->redirect(['auth/index']);
    }

    private function generateJwt() {
        $jwt = \Yii::$app->jwt;
        $signer = $jwt->getSigner('HS256');
        $key = $jwt->getKey();
        $time = time();

        $jwtParams = \Yii::$app->params['jwt'];

        return $jwt->getBuilder()
            ->identifiedBy($jwtParams['id'], true)
            ->issuedAt($time)
            ->expiresAt($time + $jwtParams['expire'])
            ->withClaim('uid', \Yii::$app->user->id)
            ->getToken($signer, $key);
    }

    protected function findModel($id)
    {
        if (($model = Token::findOne(['id' => $id])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
